# This workflow publishes a Minecraft Forge project on Github

name: Publish Github

on:
  workflow_call:
    inputs:
      java-version:
        description: 'Java version that should be used to compile the code [8, 16, 17]'
        required: true
        type: number
      mod-name:
        description: 'The name that should be added to the title of the Release on Github'
        required: true
        type: string
      mod-id:
        description: 'The mod id that is part of the built jar file'
        required: true
        type: string
      tag-prefix:
        description: 'If the tags have a prefix in front of the version like "forge-", it can be added here.'
        required: false
        type: string
        default: ''
      publish-api:
        description: 'Defines if the release should contain the api jar'
        required: false
        type: boolean
        default: false
      publish-sources:
        description: 'Defines if the release should contain the sources jar'
        required: false
        type: boolean
        default: false
    secrets:
      github-token:
        description: 'Github token'
        required: true

jobs:
  publish:
    name: Publish Github
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.github-token }}
          result-encoding: string
          script: |
            return '${{ github.ref }}'.replace('refs/tags/${{ inputs.tag-prefix }}', '');

      - name: Setup Java ${{ inputs.java-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'temurin'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Get Changelog
        id: get_changelog
        run: |
          content=`cat ./CHANGELOG.md | sed '0,/^## \[${{ steps.get_version.outputs.result }}\]/d' | sed '/^## \[/,$d'`
          # the following lines are required for multi line files
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of handling multi line file
          echo "::set-output name=result::$content"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        with:
          tag_name: ${{ steps.get_version.outputs.result }}
          release_name: ${{ inputs.mod-name }} ${{ steps.get_version.outputs.result }}
          body: ${{ steps.get_changelog.outputs.result }}
          draft: false
          prerelease: false

      - name: Upload Main Jar
        id: upload_main_jar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/libs/${{ inputs.mod-id }}-${{ steps.get_version.outputs.result }}.jar
          asset_name: ${{ inputs.mod-id }}-${{ steps.get_version.outputs.result }}.jar
          asset_content_type: application/java-archive

      - name: Upload Api Jar
        if: ${{ inputs.publish-api }}
        id: upload_api_jar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/libs/${{ inputs.mod-id }}-${{ steps.get_version.outputs.result }}-api.jar
          asset_name: ${{ inputs.mod-id }}-${{ steps.get_version.outputs.result }}-api.jar
          asset_content_type: application/java-archive

      - name: Upload Sources Jar
        if: ${{ inputs.publish-sources }}
        id: upload_sources_jar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/libs/${{ inputs.mod-id }}-${{ steps.get_version.outputs.result }}-sources.jar
          asset_name: ${{ inputs.mod-id }}-${{ steps.get_version.outputs.result }}-sources.jar
          asset_content_type: application/java-archive
