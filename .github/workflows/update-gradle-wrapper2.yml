# This workflow checks the gradle wrapper for updates

name: Update Gradle Wrapper

on:
  workflow_call:
    inputs:
      java-version:
        description: 'Java version that should be used to compile the code [8, 16, 17]'
        required: true
        type: number
    secrets:
      github-token:
        description: 'Github token'
        required: true

jobs:
  trigger:
    name: Update Gradle Wrapper
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      packages: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get latest Gradle version
        id: get-latest-gradle-version
        run: |
          content=`curl "https://services.gradle.org/versions/current"`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"

      - name: Parse latest Gradle version
        id: parse-latest-gradle-version
        run: |
          echo "::set-output name=version::${{fromJson(steps.get-latest-gradle-version.outputs.packageJson).version}}"

      - name: Setup Java ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'temurin'

      - name: Initialize Gradle
        uses: gradle/gradle-build-action@v2

      - name: Get Gradle version of repository
        id: gradle-version
        run: |
          content=$(./gradlew --version)
          echo "::set-output name=version::$content"

#      - name: Download new Gradle version
#        uses: gradle/gradle-build-action@v2
#        with:
#          arguments: wrapper --gradle-version=${{ steps.parse-latest-gradle-version.outputs.version }}
          
#      - name: Install new Gradle version
#        uses: gradle/gradle-build-action@v2
#        with:
#          arguments: wrapper --gradle-version=${{ steps.parse-latest-gradle-version.outputs.version }}

#      - name: Get Gradle version of repository
#        id: new-gradle-version
#        run: |
#          content=`./gradlew --version` 2>&1
#          echo "::set-output name=version::$content"

      - name: Print old version
        run: |
          echo "Old version ${{ steps.gradle-version.outputs.version }}"
#      - name: Print new version
#        run: |
#          echo "New version ${{ steps.new-gradle-version.outputs.version }}"

          
          
          
          
          
          
          
          
          
          
          
#      - name: Gradle Update
#        uses: gradle/gradle-build-action@v2
#        with:
#          arguments: --gradle-version=${{steps.parse-latest-gradle-version.outputs.version}}

#      - name: Second Gradle Update
#        uses: gradle/gradle-build-action@v2
#        with:
#          arguments: --gradle-version=${{steps.parse-latest-gradle-version.outputs.version}}

#      - name: Create Pull Request
#        uses: peter-evans/create-pull-request@v3.10.0
#        if: ${{steps.new-gradle-version.outputs.version}} > ${{steps.gradle-version.outputs.version}}
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          commit-message: Simple demo
#          title: '[Example] Simple demo'
#          body: >
#            This PR is auto-generated by 
#            [create-pull-request](https://github.com/peter-evans/create-pull-request).
#          labels: feature, automated pr
#          branch: feature/workflow-demo
          
#      - name: Create Pull Request
#        uses: actions/github-script@v6
#        if: ${{steps.new-gradle-version.outputs.version}} > ${{steps.gradle-version.outputs.version}}
#        with:
#          script: |
#            const { repo, owner } = context.repo;
#            const result = await github.rest.pulls.create({
#              title: '[Example] Simple demo',
#              owner,
#              repo,
#              head: '${{ github.ref_name }}',
#              base: 'develop',
#              body: [
#                'This PR is auto-generated by',
#                '[actions/github-script](https://github.com/actions/github-script).'
#              ].join('\n')
#            });
